<?php

namespace AppBundle\Repository;

/**
 * PedidoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PedidoRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Muestra una lista con los pedidos entre fechas de un restaurante
     *
     * @return array
     */
    public function getGeneralInfoOrdersBetweenDates($idRestaurante,$fechaDesde, $fechaHasta)
    {
        $stmt = $this->getEntityManager()->getConnection()
            ->prepare("SELECT distinct(p.numPedido), p.id, p.nombre as cliente, p.fecha_hora_realizado as realizado, p.estado_id, e.estado,
          total.totalDescuento, (total.totalDescuento+r.precio_envio) as totalEnvio, t.nombre as trabajador FROM restaurante r, pedido p
          LEFT JOIN trabajador AS t ON t.id = p.idTrabajador
          LEFT JOIN estado AS e ON
          p.estado_id = e.id RIGHT JOIN pedido_producto AS pp ON p.id= pp.idPedido LEFT JOIN (select pp.idPedido ,
          SUM(pp.precio*pp.cantidad-pp.descuento) as totalDescuento FROM pedido_producto as pp group by pp.idPedido) AS total ON
          p.id = total.idPedido WHERE p.idRestaurante = :idRestaurante AND r.id = :idRestaurante AND p.fecha_hora_realizado <= :fechaHasta
          AND p.fecha_hora_realizado >= :fechaDesde ORDER BY p.estado_id");
        $datefH = $fechaHasta->format('Y-m-d');
        $datefD = $fechaDesde->format('Y-m-d');
        $stmt->bindParam("idRestaurante", $idRestaurante);
        $stmt->bindParam("fechaDesde", $datefD);
        $stmt->bindParam("fechaHasta", $datefH);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Muestra todos los pedidos del día actual
     *
     * @return array
     */
    public function getGeneralInfoOrdersToday($idRestaurante, $fecha)
    {
        $fechaD = $fecha.' 00:00:00';
        $fechaH = $fecha.' 23:59:59';
        $stmt = $this->getEntityManager()->getConnection()
            ->prepare("SELECT distinct(p.numPedido), p.id, p.nombre as cliente, p.fecha_hora_realizado as realizado, p.estado_id, e.estado,
          total.totalDescuento, (total.totalDescuento+r.precio_envio) as totalEnvio, t.nombre as trabajador
          FROM restaurante r, pedido p LEFT JOIN estado AS e ON p.estado_id = e.id
           LEFT JOIN trabajador AS t ON t.id = p.idTrabajador
          RIGHT JOIN pedido_producto AS pp ON p.id= pp.idPedido LEFT JOIN (select pp.idPedido ,
          SUM(pp.precio*pp.cantidad-pp.descuento) as totalDescuento FROM pedido_producto as pp group by pp.idPedido) AS total ON
          p.id = total.idPedido WHERE p.idRestaurante = :idRestaurante AND r.id = :idRestaurante AND p.fecha_hora_realizado >= :fechaD
          AND p.fecha_hora_realizado <= :fechaH ORDER BY p.estado_id");
        $stmt->bindParam("idRestaurante", $idRestaurante);
        $stmt->bindParam("fechaD", $fechaD);
        $stmt->bindParam("fechaH", $fechaH);
        $stmt->execute();
        return $stmt->fetchAll();
    }


    /**
     * Muestra una lista con todos los pedidos de un restaurante por estado, si no se especifica se muestran todos
     *
     * @return array
     */
    public function getGeneralInfoOrdersByState($idRestaurante, $idEstado)
    {
        $sql = "SELECT distinct(p.numPedido), p.id, p.nombre as cliente, p.fecha_hora_realizado as realizado, p.estado_id, e.estado,
          total.totalDescuento, (total.totalDescuento+r.precio_envio) as totalEnvio, t.nombre as trabajador
          FROM restaurante r, pedido p
          LEFT JOIN trabajador AS t ON t.id = p.idTrabajador
          LEFT JOIN estado AS e ON
          p.estado_id = e.id RIGHT JOIN pedido_producto AS pp ON p.id= pp.idPedido LEFT JOIN (select pp.idPedido ,
          SUM(pp.precio*pp.cantidad-pp.descuento) as totalDescuento FROM pedido_producto as pp group by pp.idPedido) AS total ON
          p.id = total.idPedido WHERE p.idRestaurante = :idRestaurante AND r.id = :idRestaurante";
        if($idEstado != 0 and $idEstado != '-'){
            $sql .= " AND p.estado_id = :idEstado";
        }else $sql .= " ORDER BY p.estado_id";
        $stmt = $this->getEntityManager()->getConnection()
            ->prepare($sql);
        $stmt->bindParam("idRestaurante", $idRestaurante);
        if($idEstado != 0 and $idEstado != '-') {
            $stmt->bindParam("idEstado", $idEstado);
        }
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Devuelve toda la información de todos los productos de un pedido
     *
     * @param $idPedido
     * @return array
     */
    public function getInfoProductOrder($idPedido)
    {
        $stmt = $this->getEntityManager()->getConnection()
            ->prepare("SELECT p.id as pedido_id, pp.cantidad, pp.idProducto, pr.nombre, pp.precio, pp.descuento, (pp.precio*pp.cantidad) as total
            , (pp.precio*pp.cantidad-pp.descuento) as totalDescuento FROM usuario u, producto pr ,pedido p RIGHT JOIN pedido_producto AS pp ON p.id = pp.idPedido WHERE p.id = :idPedido AND
            pr.id = pp.idProducto GROUP BY p.id, p.fecha_hora_realizado, p.estado_id, pp.cantidad, pp.idProducto, pr.nombre, pp.precio, pp.descuento");
        $stmt->bindParam("idPedido", $idPedido);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Devuelve los datos del usuario y del pedido del idPedido pasado
     *
     * @param $idPedido
     * @return array
     */
    public function getInfoOrder($idPedido){
        $stmt = $this->getEntityManager()->getConnection()
            ->prepare("SELECT p.id, p.numPedido, p.idRecorrido, p.fecha_hora_salida, p.fecha_hora_llegada, p.nombre as cliente, p.domicilio, p.telefono,
            p.email, p.idRestaurante, p.idTrabajador, p.fecha_hora_realizado, p.estado_id, p.pagado FROM pedido p WHERE p.id = :idPedido");
        $stmt->bindParam("idPedido", $idPedido);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Muestra todos los pedidos de un trabajador
     *
     * @return array
     */
    public function getGeneralInfoOrdersByEmployee($idTrabajador, $estado = null)
    {
        $sql = "SELECT DISTINCT(p.id), p.numPedido, p.nombre as cliente, p.telefono, p.domicilio,
                p.fecha_hora_realizado as realizado, p.fecha_hora_salida, p.fecha_hora_llegada,p.estado_id, e.estado,
                (total.totalDescuento) as totalEnvio FROM recorrido r, pedido p LEFT JOIN estado AS e ON p.estado_id
                = e.id RIGHT JOIN pedido_producto AS pp ON p.id= pp.idPedido LEFT JOIN
                (select pp.idPedido, SUM(pp.precio*pp.cantidad-pp.descuento) as totalDescuento FROM
                pedido_producto as pp group by pp.idPedido) AS total ON p.id = total.idPedido WHERE
                p.idTrabajador = :idTrabajador AND r.idTrabajador = :idTrabajador AND p.idRecorrido = r.id AND r.trash = 0";
        if($estado != null) $sql .= " AND p.estado = :estado";
        $stmt = $this->getEntityManager()->getConnection()
            ->prepare($sql);
        $stmt->bindParam("idTrabajador", $idTrabajador);
        if($estado != null) $stmt->bindParam("estado", $estado);
        $stmt->execute();
        return $stmt->fetchAll();
    }

    /**
     * Obtengo todos los pedidos de un recorrido
     *
     * @param $idRecorrido
     */
    public function getOrdersByTravel($idRecorrido){
        $stmt = $this->getEntityManager()->getConnection()
            ->prepare("SELECT p.id, p.estado_id, p.idRecorrido, p.fecha_hora_salida as salida, p.fecha_hora_llegada as llegada
              FROM pedido p WHERE p.idRecorrido = :idRecorrido");
        $stmt->bindParam("idRecorrido", $idRecorrido);
        $stmt->execute();
        return $stmt->fetchAll();
    }
}
